name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: mousepilot-linux-x64.zip
            binary_name: mousepilot
            platform: linux
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: mousepilot-windows-x64.zip
            binary_name: mousepilot.exe
            platform: windows
          - target: x86_64-apple-darwin
            os: macos-15
            artifact_name: mousepilot-macos-x64.zip
            binary_name: mousepilot
            platform: macos-x64
          - target: aarch64-apple-darwin
            os: macos-15
            artifact_name: mousepilot-macos-arm64.zip
            binary_name: mousepilot
            platform: macos-arm64
          

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxtst-dev \
            pkg-config

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C target-cpu=native"
          TARGET: ${{ matrix.target }}

      - name: Build release binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C target-cpu=native"
          TARGET: ${{ matrix.target }}



      - name: Prepare release assets (Windows)
        if: matrix.platform == 'windows'
        shell: powershell
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path "${{ matrix.binary_name }}" -DestinationPath "$env:GITHUB_WORKSPACE/${{ matrix.artifact_name }}" -Force

      - name: Prepare release assets (Linux)
        if: matrix.platform == 'linux'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          
          # Create zip with binary
          zip "$GITHUB_WORKSPACE/${{ matrix.artifact_name }}" "${{ matrix.binary_name }}"

      - name: Prepare release assets (macOS)
        if: matrix.platform != 'windows' && matrix.platform != 'linux'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          
          # Create app bundle directory structure
          app_name="MousePilot.app"
          mkdir -p "$app_name/Contents/MacOS"
          mkdir -p "$app_name/Contents/Resources"
          
          # Copy binary
          cp "${{ matrix.binary_name }}" "$app_name/Contents/MacOS/"
          
          # Copy Info.plist
          cp "../../../assets/Info.plist" "$app_name/Contents/"
          
          # Copy icon if exists
          if [ -f "../../../assets/icon.icns" ]; then
            cp "../../../assets/icon.icns" "$app_name/Contents/Resources/"
          fi
          
          # Create zip with .app bundle
          zip -r "$GITHUB_WORKSPACE/${{ matrix.artifact_name }}" "$app_name"



      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          if-no-files-found: error

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: always()
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "Checking downloaded artifacts:"
          ls -la artifacts/ || echo "artifacts directory not found"
          echo "Looking for specific files:"
          for file in mousepilot-linux-x64.zip mousepilot-windows-x64.zip mousepilot-macos-x64.zip mousepilot-macos-arm64.zip; do
            if [ -f "artifacts/$file" ]; then
              echo "✅ Found: artifacts/$file"
              ls -la "artifacts/$file"
            else
              echo "❌ Missing: artifacts/$file"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/mousepilot-linux-x64.zip
            ./artifacts/mousepilot-windows-x64.zip
            ./artifacts/mousepilot-macos-x64.zip
            ./artifacts/mousepilot-macos-arm64.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 